version: '3.8'

networks:
  internal:
    driver: bridge

volumes:
  database:
  redis:

services:
  postgresql:
    image: postgres:16-alpine
    container_name: ${PG_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${PG_PORT}:${PG_PORT}"
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    healthcheck:
      test: ${POSTGRES_HEALTHCHECK_CMD}
      start_period: ${HEALTHCHECK_START_PERIOD}
      interval: ${HEALTHCHECK_INTERVAL}
      retries: ${HEALTHCHECK_RETRIES}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT}
    volumes:
      - database:/var/lib/postgresql/data
    env_file:
      - .env
    networks:
      - internal

  redis:
    image: redis:alpine
    container_name: ${REDIS_CONTAINER_NAME}
    command: ${REDIS_COMMAND}
    restart: unless-stopped
    healthcheck:
      test: ${REDIS_HEALTHCHECK_CMD}
      start_period: ${HEALTHCHECK_START_PERIOD}
      interval: ${HEALTHCHECK_INTERVAL}
      retries: ${HEALTHCHECK_RETRIES}
      timeout: ${HEALTHCHECK_TIMEOUT}
    volumes:
      - redis:/data
    networks:
      - internal

  server:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG}
    container_name: ${SERVER_CONTAINER_NAME}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__PORT: ${PG_PORT}
      AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${SMTP_USER}
      AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASS}
      AUTHENTIK_EMAIL__USE_TLS: ${SMTP_TLS}
      AUTHENTIK_EMAIL__FROM: ${SMTP_FROM}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - internal

  worker:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_TAG}
    container_name: ${WORKER_CONTAINER_NAME}
    restart: unless-stopped
    command: worker
    user: root
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_POSTGRESQL__PORT: ${PG_PORT}
      AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      AUTHENTIK_EMAIL__PORT: ${SMTP_PORT}
      AUTHENTIK_EMAIL__USERNAME: ${SMTP_USER}
      AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASS}
      AUTHENTIK_EMAIL__USE_TLS: ${SMTP_TLS}
      AUTHENTIK_EMAIL__FROM: ${SMTP_FROM}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - internal

  nginx:
    image: nginx:alpine
    container_name: ${NGINX_CONTAINER_NAME}
    restart: always
    ports:
      - "${NGINX_PORT_HTTP}:${NGINX_PORT_HTTP}"
      - "${NGINX_PORT_HTTPS}:${NGINX_PORT_HTTPS}"
    volumes:
      - ./nginx.conf.template:/etc/nginx/nginx.conf.template:ro
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "envsubst '$$DOMAIN_NAME $$COMPOSE_PORT_HTTP $$NGINX_PORT_HTTP' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && exec nginx -g 'daemon off;'"
    env_file:
      - .env
    depends_on:
      - server
    networks:
      - internal

